# This workflow will upload a Python Package using Twine when a release is created
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python#publishing-to-package-registries

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Upload Python Package to PyPI

on:
  release:
    types: [published]

permissions:
  contents: read

jobs:
  deploy:

    runs-on: ubuntu-latest
    strategy:
      matrix: 
        python-version: ['3.10', '3.11', '3.12']

    steps:
    - uses: actions/checkout@v3
    - name: Set up Python
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine coverage pytest flake8
    - name: Lint code with flake8
      run: flake8 .
    - name: Run tests with pytest
      run: coverage run -m pytest
    - name: Upload coverage report
      uses: actions/upload-artifact@v2
      with:
        name: coverage-report
        path: coverage.xml
    - name: Build package
      run: python -m build
    - name: Publish package to PyPI
      if: matrix.python-version == '3.12'
      run: twine upload --repository pypi dist/*
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_KEY }}  # Make sure to use the secret for PyPI
    - name: Send notifications for build failures
      if: failure()
      run: |
        echo "Build failed. Sending notification..."
        # Add your notification logic here
